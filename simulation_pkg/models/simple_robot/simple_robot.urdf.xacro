<?xml version="1.0"?>
<robot name="simple_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- Define parameters -->
    <xacro:property name="pi" value="3.1415"/>
    <!-- Parameters for chassis of robot, size [m] and mass [kg] -->
    <xacro:property name="x_chassis" value="0.5"/>
    <xacro:property name="y_chassis" value="0.3"/>
    <xacro:property name="z_chassis" value="0.15"/>
    <xacro:property name="m_chassis" value="10.0"/>

    <!-- Parameters for the wheels, radius [m], height [m], mass[kg], torque [Nm], wheelbase [m] -->
    <xacro:property name="r_wheel" value="0.1075"/>
    <xacro:property name="h_wheel" value="0.03"/>
    <xacro:property name="m_wheel" value="3.0"/>
    <xacro:property name="torque_wheel" value="10"/>
    <xacro:property name="L_wheel" value="1.788"/>

    <!-- Parameters for size of 'camera' box -->
    <xacro:property name="camera_size" value="0.1"/>

    <!-- Define macros -->
    <!-- Inertial macro for chassis -->
    <xacro:macro name="box_inertial">
        <inertial>
            <mass value="${m_chassis}"/>
            <inertia
                ixx="${m_chassis*(y_chassis*y_chassis+z_chassis*z_chassis)/12}" ixy="0.0" ixz="0.0"
                iyy="${m_chassis*(x_chassis*x_chassis+z_chassis*z_chassis)/12}" iyz="0.0" 
                izz="${m_chassis*(x_chassis*x_chassis+z_chassis*z_chassis)/12}"
            />
        </inertial>
    </xacro:macro>
    <!-- Inertial macro for wheels -->
    <xacro:macro name="cylinder_inertial">
        <inertial>
            <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}"/>
            <mass value="${m_wheel}"/>
            <inertia
                ixx="${m_wheel*(3*r_wheel*r_wheel+h_wheel*h_wheel)/12}" ixy="0" ixz="0"
                iyy="${m_wheel*(3*r_wheel*r_wheel+h_wheel*h_wheel)/12}" iyz="0" 
                izz="${m_wheel*r_wheel*r_wheel/2}"
            />
        </inertial>
    </xacro:macro>

    <!-- Import all Gazebo-customization elements, including Gazebo colors -->
    <xacro:include filename="$(find simulation_pkg)/models/simple_robot/simple_robot.gazebo"/>

    <!-- Used for fixing robot to Gazebo 'base_link' -->
    <!-- <link name="world"/> -->

    <!-- Create the chassis -->
    <link name="chassis">
        <pose>0 0 0 0 0 0</pose>
        <!-- Define inertial system for chassis -->
        <xacro:box_inertial/>
        <!-- Define collision surrounding box -->
        <collision name="collision">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${x_chassis} ${y_chassis} ${z_chassis}"/>
            </geometry>
        </collision>
        <!-- Define visual structure -->
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${x_chassis} ${y_chassis} ${z_chassis}"/>
            </geometry>
        </visual>
        <!-- Add the caster wheel -->
        <collision name="caster_collision">
            <origin xyz="${-(r_wheel/2)+x_chassis/2} 0 ${-z_chassis/2}" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${r_wheel/2}"/>
            </geometry>
            <surface>
                <friction>
                    <ode>
                        <mu>0</mu>
                        <mu2>0</mu2>
                        <slip1>1.0</slip1>
                        <slip2>1.0</slip2>
                    </ode>
                </friction>
            </surface>
        </collision>
        <visual>
            <origin xyz="${-(r_wheel/2)+x_chassis/2} 0 ${-z_chassis/2}" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${r_wheel/2}"/>
            </geometry>
        </visual>
    </link>

    <!-- <joint name="fixed" type="fixed">
        <parent link="world"/>
        <child link="chassis"/>
    </joint> -->

    <!-- Create the camera -->
    <link name="camera_link">
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
        </collision>
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
        </visual>
        <inertial>
            <mass value="1e-5"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia
                ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"
            />
        </inertial>
    </link>

    <!-- Create the joint for the camera -->
    <joint name="camera_joint" type="fixed">
        <axis xys="0 1 0"/>
        <origin xyz="0 0 ${z_chassis/2+camera_size/2}" rpy="0 0 0"/>
        <parent link="chassis"/>
        <child link="camera_link"/>
    </joint>

    <!-- Generate an optical frame so that ROS and OpenCV can operate on the camera frame correctly -->
    <link name="camera_link_optical"/>

    <joint name="camera_optical_joint" type="fixed">
        <!-- These values have to be these values otherwise the Gazebo
             camera image won't be aligned properly with the frame it is supposedly originating from -->
             <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
             <parent link="camera_link"/>
             <child link="camera_link_optical"/>
    </joint>

    <!-- Create the wheels -->
    <link name="left_wheel">
        <collision name="collision">
            <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}"/>
            <geometry>
                <cylinder radius="${r_wheel}" length="${h_wheel}"/>
            </geometry>
            <surface>
                <friction>
                    <ode>
                        <mu>1.0</mu>
                        <mu2>1.0</mu2>
                        <slip1>0.0</slip1>
                        <slip2>0.0</slip2>
                    </ode>
                </friction>
            </surface>
        </collision>
        <visual name="left_wheel_visual">
            <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}"/>
            <geometry>
                <cylinder radius="${r_wheel}" length="${h_wheel}"/>
            </geometry>
        </visual>
        <xacro:cylinder_inertial/>
    </link>

    <link name="right_wheel">
        <collision name="collision">
            <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}"/>
            <geometry>
                <cylinder radius="${r_wheel}" length="${h_wheel}"/>
            </geometry>
            <surface>
                <friction>
                    <ode>
                        <mu>1.0</mu>
                        <mu2>1.0</mu2>
                        <slip1>0.0</slip1>
                        <slip2>0.0</slip2>
                    </ode>
                </friction>
            </surface>
        </collision>
        <visual name="right_wheel_visual">
            <origin xyz="0 0 0" rpy="0 ${pi/2} ${pi/2}"/>
            <geometry>
                <cylinder radius="${r_wheel}" length="${h_wheel}"/>
            </geometry>
        </visual>
        <xacro:cylinder_inertial/>
    </link>

    <!-- Create the joints for the wheels -->
    <joint type="continuous" name="left_wheel_hinge">
        <origin xyz="${-x_chassis/4} ${y_chassis/2+h_wheel/2} ${r_wheel/2-z_chassis/2}" rpy="0 0 0"/>
        <child link="left_wheel"/>
        <parent link="chassis"/>
        <axis xyz="0 1 0" rpy="0 0 0"/>
        <limit effort="100" velocity="100"/>
        <joint_properties damping="0.0" friction="0.0"/>
    </joint>

    <joint type="continuous" name="right_wheel_hinge">
        <origin xyz="${-x_chassis/4} ${-y_chassis/2-h_wheel/2} ${r_wheel/2-z_chassis/2}" rpy="0 0 0"/>
        <child link="right_wheel"/>
        <parent link="chassis"/>
        <axis xyz="0 1 0" rpy="0 0 0"/>
        <limit effort="100" velocity="100"/>
        <joint_properties damping="0.0" friction="0.0"/>
    </joint>
</robot>